#define _CRT_SECURE_NO_WARNINGS


#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#include "LinkedListHeader.h"


int main()
{
    int option, value, replaceValue;
    int countDeleted = 0;
    int countDuplicades;
    clock_t tic, toc;

    NODE* listHead1 = NULL;
    NODE* listHead2 = NULL;

    do
    {
        printf("###             0 - Print Linked List:                    ###\n");
        printf("###             1 - Insert at the head:                   ###\n");
        printf("###             2 - Insert at the tail:                   ###\n");
        printf("###             3 - Delete at the head:                   ###\n");
        printf("###             4 - Delete at the tail:                   ###\n");
        printf("###             5 - Find a value:                         ###\n");
        printf("###             6 - Find a match values:                  ###\n");
        printf("###             7 - Replace values:                       ###\n");
        printf("###             8 - Delete first match:                   ###\n");
        printf("###             9 - Delete all the match:                 ###\n");
        printf("###             10 - Delete all the match better:         ###\n");
        printf("###             11 - Insert at the tail in list2:         ###\n");
        printf("###             12 - Append list1 with list2              ###\n");
        printf("###             13 - Reversing list                       ###\n");
        printf("###             14 - BubbleSort                           ###\n");
        printf("###             15 - QuickSort                            ###\n");
        printf("###             16 - Remove Duplicates                    ###\n");
        printf("###             17 - Populate List 1 and 2                ###\n");
        printf("###             18 - Insert After Value                   ###\n");
        printf("###             19 - Delete List 1 and 2                  ###\n");
        printf("###             99 - Exit aplication                      ###\n");

        scanf("%d", &option);

        switch (option)
        {

        case 0:
            puts("\nLinked List\n");
            printList(listHead1);
            printf("\nList Lenght: %d ", lenghtList(listHead1));
            printf("\nList Lenght Recursive: %d \n", lenghtListRecursive(listHead1));
            break;
        case 1:
            printf("Insert the value to put in the head: ");
            scanf("%d", &value);
            listHead1 = insertAtHead(listHead1, value);
            break;
        case 2:
            printf("Insert the value to put in the tail: ");
            scanf("%d", &value);
            listHead1 = insertaAtTheTail(listHead1, value);
            break;
        case 3:
            listHead1 = deleteAtTheHead(listHead1);
            break;
        case 4:
            listHead1 = deletingAtTheTail(listHead1);
            break;
        case 5:
            printf("Insert a value to find: ");
            scanf("%d", &value);
            if (findValueRecursive(listHead1, value))
                printf("The value %d exists in the list\n", value);
            else
                printf("The value %d donÂ´t exists in the list\n", value);
            break;
        case 6:
            printf("Insert a value to count a match: ");
            scanf("%d", &value);
            printf("The number of %d is %d\n", value, findMacthesRecursive(listHead1, value));
            break;
        case 7:
            printf("Insert a value to replace: ");
            scanf("%d", &value);
            if (findMacthesRecursive(listHead1, value) == NULL)
            {
                printf("The value %d do not exist in the list\n", value);
                break;
            }
            else
            {
                printf("Insert a value: ");
                scanf("%d", &replaceValue);

                printf("Count of replaces of number %d to %d = %d\n", value, replaceValue, findMacthesRecursive(listHead1, value));

                replaceValuesRecursive(listHead1, value, replaceValue);
                break;
            }
        case 8:
            printf("Insert a value to delete: ");
            scanf("%d", &value);
            bool deleted;
            listHead1 = deleteFirstMatch(listHead1, value, &deleted);
            if (deleted)
            {
                printf("Number %d was deleted from the list.\n", value);
                break;
            }
            else
            {
                printf("Number %d not exist in the list.\n", value);
                break;
            }
        case 9:
            printf("Insert a value to delete all the values: ");
            scanf("%d", &value);
            tic = clock();
            listHead1 = deleteAllTheMatch(listHead1, value, &countDeleted);
            toc = clock();
            if (countDeleted != 0)
            {
                printf("Number %d was deleted from the list %d times.\n", value, countDeleted);
                printf("operation time : %fs\n", (double)(toc - tic) / CLOCKS_PER_SEC);
                break;
            }
            else
            {
                printf("Number %d not exist in the list.\n", value);
                break;
            }
        case 10:
            printf("Insert a value to delete all the values: ");
            scanf("%d", &value);
            tic = clock();
            listHead1 = deleteAllTheMatchEfficient(listHead1, value, &countDeleted);
            toc = clock();
            if (countDeleted != 0)
            {
                printf("Number %d was deleted from the list %d times.\n", value, countDeleted);
                printf("operation time : %fs\n", (double)(toc - tic) / CLOCKS_PER_SEC);
                break;
            }
            else
            {
                printf("Number %d not exist in the list.\n", value);
                break;
            }
        case 11:
            printf("Insert the value to put in the tail in list2: ");
            scanf("%d", &value);
            listHead2 = insertaAtTheTail(listHead2, value);
            break;
        case 12:
            listHead1 = appendLists(listHead1, listHead2);
            puts("\nLinked List\n");
            printList(listHead1);
            printf("\nList Lenght: %d ", lenghtList(listHead1));
            printf("\nList Lenght Recursive: %d \n", lenghtListRecursive(listHead1));
            break;
        case 13:
            listHead1 = reversingList(listHead1);
            puts("\nLinked List Reversed\n");
            printList(listHead1);
            printf("\nList Lenght: %d ", lenghtList(listHead1));
            printf("\nList Lenght Recursive: %d \n", lenghtListRecursive(listHead1));
            break;
        case 14:
            tic = clock();
            bubbleSortList(listHead1);
            toc = clock();
            puts("\nLinked List BubbleSorted\n");
            printList(listHead1);
            printf("\nList Lenght: %d ", lenghtList(listHead1));
            printf("\nList Lenght Recursive: %d \n", lenghtListRecursive(listHead1));
            printf("operation time : %.10fs\n", (double)(toc - tic) / CLOCKS_PER_SEC);
            break;
        case 15:
            tic = clock();
            listHead1 = quickSortLinkedList(listHead1, getLastNode(listHead1));
            toc = clock();
            puts("\nLinked List QuickSorted\n");
            printList(listHead1);
            printf("\nList Lenght: %d ", lenghtList(listHead1));
            printf("\nList Lenght Recursive: %d \n", lenghtListRecursive(listHead1));
            printf("operation time : %.10fs\n", (double)(toc - tic) / CLOCKS_PER_SEC);
            break;
        case 16:
            tic = clock();
            removeDuplicades(listHead1, &countDuplicades);
            toc = clock();
            printf("%d duplicades removed\n", countDuplicades);
            printf("operation time : %fs\n", (double)(toc - tic) / CLOCKS_PER_SEC);
            break;
        case 17:
            listHead1 = populateList(listHead1);
            listHead2 = populateList(listHead2);
            break;
        case 18:
            printf("Insert a value insert: ");
            scanf("%d", &value);
            printf("Insert a value to insert after: ");
            scanf("%d", &replaceValue);
            listHead1 = insertAfter(listHead1, value, replaceValue);
            printf("The value %d is inserted after the value %d\n", value, replaceValue);
            break;
        case 19:
            listHead1 = deleteList(listHead1);
            listHead2 = deleteList(listHead2);
        case 99:
            break;
        default:
            puts("Invalid Option!");
            break;
        }


    } while (option != 99);

    return 0;
}
